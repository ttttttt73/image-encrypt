[{"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\index.js":"1","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\reportWebVitals.js":"2","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\App.js":"3","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestEncryptHooks.jsx":"4","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\ipfs.js":"5","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\utils\\getWeb3.js":"6","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestDecryptHooks.jsx":"7"},{"size":610,"mtime":1611050985000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":4738,"mtime":1614497065127,"results":"11","hashOfConfig":"9"},{"size":2424,"mtime":1614495945845,"results":"12","hashOfConfig":"9"},{"size":148,"mtime":1611424216412,"results":"13","hashOfConfig":"9"},{"size":892,"mtime":1611658097387,"results":"14","hashOfConfig":"9"},{"size":1624,"mtime":1614502571632,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"cb5r6v",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\index.js",["34"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// export * from './PostRequestEncryptHooks';\nimport PostRequestEncryptHooks from './PostRequestEncryptHooks'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["35","36"],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\reportWebVitals.js",[],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\App.js",["37","38","39","40","41","42","43"],"import React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { PostRequestEncryptHooks } from './PostRequestEncryptHooks';\r\nimport { PostRequestDecryptHooks } from './PostRequestDecryptHooks';\r\nimport ipfs from './ipfs';\r\nimport getWeb3 from \"./utils/getWeb3\";\r\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\r\n\r\n\r\nfunction App() {\r\n  var useStateRef = require('react-usestateref')\r\n  const [placeholder, setPlaceholder] = useState('Hi');\r\n  const [filebuffer, setBuffer] = useState(null);\r\n  const [state, setState] = useState({\r\n    send_file: \"\",\r\n    sign_file: \"\"\r\n  })\r\n  var [block_sign, setBlock, blockRef] = useStateRef(null)\r\n  var [block_content, setBlock2, blockRef2] = useStateRef(null)\r\n  const [ethcontract, setEthContract] = useState({\r\n    storageValue: 0,\r\n    web3: null,\r\n    accounts: null,\r\n    contract: null\r\n  })\r\n\r\n  useEffect (() => {\r\n    try {\r\n      async function setContract() {\r\n        const web3 = await getWeb3();\r\n        const accounts = await web3.eth.getAccounts();\r\n        const networkId = await web3.eth.net.getId();\r\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\r\n        const instance = new web3.eth.Contract(\r\n          SimpleStorageContract.abi,\r\n          deployedNetwork && deployedNetwork.address,\r\n        );\r\n        setEthContract({ web3, accounts, contract: instance }, {retrieveFile});\r\n      }\r\n\r\n      setContract();\r\n      \r\n    } catch (error) {\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  }, []);\r\n\r\n  \r\n  const retrieveFile = async () => {\r\n    const { accounts, contract } = ethcontract;\r\n    console.log(\"Contract's get call: \", await contract.methods.get().call())\r\n  }\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      console.log('buffer is changed')\r\n      console.log(\"ethcontract: \", ethcontract)\r\n      const contract = ethcontract.contract;\r\n      const accounts = ethcontract.accounts;\r\n      /*let amount = 1\r\n      let tokens = web3.utils.toWei(amount.toString(), 'ether')\r\n      let bntokens = web3.utils.toBN(tokens)*/\r\n      console.log(accounts[0]);\r\n      console.log(\"block.content: \", block_content);\r\n      console.log(\"block.sign: \", block_sign);\r\n      await contract.methods.set(block_content, block_sign).send({ from: accounts[0] });\r\n      // await contract.methods.set(\"test1\", \"test2\").send({ from: accounts[0] });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const captureFile = (event) =>{\r\n    event.preventDefault();\r\n\r\n    const file = event.target.files[0];\r\n    const reader = new FileReader();\r\n    //reader.readAsArrayBuffer(file);\r\n    /* reader.readAsArrayBuffer(file);\r\n    reader.onloadend = () => {\r\n      setBuffer(reader.result);\r\n      console.log('buffer', filebuffer);\r\n    }*/\r\n    reader.onloadend = () => {\r\n      setBuffer(reader.result);\r\n    };\r\n    reader.readAsDataURL(file)\r\n\r\n\r\n  }\r\n\r\n  const onSubmit_decrypt = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      console.log('onSubmit_decrypt executed!')\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const onChange = (event) => {\r\n    const { name, value } = event.target;\r\n    /*const name = event.target.name;\r\n    const value = event.target.value;*/\r\n    setState({\r\n      ...state,\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n        <p>Flask says {placeholder}</p>\r\n        <form onSubmit={onSubmit}>\r\n          <h2>Encryption</h2>\r\n          <input type='file' onChange={captureFile}/>\r\n          <input type='submit'/>\r\n        </form>\r\n        <img src={filebuffer} alt=\"receive image\"/>\r\n        <PostRequestEncryptHooks msg={filebuffer} block_sign={block_sign} setBlock={setBlock} blockRef={blockRef}\r\n        block_content={block_content} setBlock2={setBlock2} blockRef2={blockRef2}/>\r\n        <button onClick={onSubmit}>\r\n          Contract send call\r\n        </button>\r\n        <button onClick={retrieveFile}>\r\n          Contract get call\r\n        </button>\r\n        <h2>Decrytion</h2>\r\n        <PostRequestDecryptHooks block_sign={block_sign} block_content={block_content}/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestEncryptHooks.jsx",["44"],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction PostRequestEncryptHooks(props) {\r\n    const [Key, setKey] = useState(null);\r\n    const [IV, setIV] = useState(null);\r\n    const [Ciphertext, setCiphertext] = useState(null);\r\n    const [Ciphertext2, setCiphertext2] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            // body: JSON.stringify({ msg: props.filebuffer })\r\n            body: JSON.stringify({ msg: props.msg })\r\n        };\r\n        if (props.msg !== null) {\r\n            setKey(null);\r\n            setIV(null);\r\n            setCiphertext(null);\r\n            setCiphertext2(null);\r\n            fetch('/encrypt2', requestOptions).then(res => res.json()).then(\r\n                data => {\r\n                    setKey(data.send_res);\r\n                    setIV(data.sign_res);\r\n                    setCiphertext(data.ciphertext);\r\n                    setCiphertext2(data.ciphertext2);\r\n                    props.setBlock2(data.sign_res)\r\n                    props.setBlock(data.send_res)\r\n                    console.log(\"block.content: \", props.blockRef2)\r\n                    console.log(\"block.sign: \", props.blockRef)\r\n                })   \r\n        } else {\r\n            console.log('buffer is null')\r\n        }\r\n    }, [props.msg]);\r\n   \r\n    return (\r\n        <div className=\"card text-cetner m-3\">\r\n            <h5 className=\"card-header\">Post Request Result - Encryption</h5>\r\n            <div className=\"card-body\">\r\n                <h6>Returned send_res: {Key}</h6>\r\n                <h6>Returned sign_res: {IV}</h6>\r\n                <h6>Returned Ciphertext: {Ciphertext}</h6>\r\n                <h6>Returned Ciphertext2: {Ciphertext2}</h6>\r\n            </div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport { PostRequestEncryptHooks };\r\n\r\n\r\n/*async function postData(url = '', data = {}) {\r\n    const response = await fetch(url, {\r\n        mothod: 'POST',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n        body: JSON.stringify(data)\r\n    });\r\n    return response.json();\r\n}\r\n\r\npostData('https://example.com/answer', { answer: 42 }).then(data => {\r\n    console.log(data);\r\n});*/\r\n","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\ipfs.js",[],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\utils\\getWeb3.js",[],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestDecryptHooks.jsx",[],{"ruleId":"45","severity":1,"message":"46","line":7,"column":8,"nodeType":"47","messageId":"48","endLine":7,"endColumn":31},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"45","severity":1,"message":"53","line":6,"column":8,"nodeType":"47","messageId":"48","endLine":6,"endColumn":12},{"ruleId":"45","severity":1,"message":"54","line":13,"column":23,"nodeType":"47","messageId":"48","endLine":13,"endColumn":37},{"ruleId":"55","severity":1,"message":"56","line":50,"column":6,"nodeType":"57","endLine":50,"endColumn":8,"suggestions":"58"},{"ruleId":"45","severity":1,"message":"59","line":54,"column":13,"nodeType":"47","messageId":"48","endLine":54,"endColumn":21},{"ruleId":"45","severity":1,"message":"60","line":97,"column":9,"nodeType":"47","messageId":"48","endLine":97,"endColumn":25},{"ruleId":"45","severity":1,"message":"61","line":106,"column":9,"nodeType":"47","messageId":"48","endLine":106,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":137,"column":9,"nodeType":"64","endLine":137,"endColumn":52},{"ruleId":"55","severity":1,"message":"65","line":35,"column":8,"nodeType":"57","endLine":35,"endColumn":19,"suggestions":"66"},"no-unused-vars","'PostRequestEncryptHooks' is defined but never used.","Identifier","unusedVar","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'ipfs' is defined but never used.","'setPlaceholder' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveFile'. Either include it or remove the dependency array.","ArrayExpression",["69"],"'accounts' is assigned a value but never used.","'onSubmit_decrypt' is assigned a value but never used.","'onChange' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [retrieveFile]",{"range":"75","text":"76"},"Update the dependencies array to be: [props, props.msg]",{"range":"77","text":"78"},[1657,1659],"[retrieveFile]",[1374,1385],"[props, props.msg]"]