[{"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\index.js":"1","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\reportWebVitals.js":"2","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\App.js":"3","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestEncryptHooks.jsx":"4","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestDecryptHooks.jsx":"5","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\ipfs.js":"6","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\utils\\getWeb3.js":"7"},{"size":610,"mtime":1611050985000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":5266,"mtime":1614159415046,"results":"11","hashOfConfig":"9"},{"size":2667,"mtime":1614168950262,"results":"12","hashOfConfig":"9"},{"size":1569,"mtime":1613666272497,"results":"13","hashOfConfig":"9"},{"size":148,"mtime":1611424216412,"results":"14","hashOfConfig":"9"},{"size":892,"mtime":1611658097387,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"cb5r6v",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\index.js",["35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// export * from './PostRequestEncryptHooks';\nimport PostRequestEncryptHooks from './PostRequestEncryptHooks'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["36","37"],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\reportWebVitals.js",[],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\App.js",["38","39","40","41","42","43","44","45","46","47","48","49"],"import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { PostRequestEncryptHooks } from './PostRequestEncryptHooks';\nimport { PostRequestDecryptHooks } from './PostRequestDecryptHooks';\nimport ipfs from './ipfs';\nimport getWeb3 from \"./utils/getWeb3\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\n\n\nfunction App() {\n  const [placeholder, setPlaceholder] = useState('Hi');\n  const [filebuffer, setBuffer] = useState(null);\n  const [Plaintext, setPlaintext] = useState(null);\n  const [state, setState] = useState({\n    send_file: \"\",\n    sign_file: \"\"\n  })\n  const [block, setBlock] = useState({\n    content: \"\",\n    sign: \"\"\n    //ciphertext: \"\",\n    //ciphertext2: \"\"\n  })\n  const [ipfsHash, setIpfsHash] = useState(null);\n  const [ethcontract, setEthContract] = useState({\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null\n  })\n  const b64 = \"\"\n  useEffect (() => {\n    try {\n      async function setContract() {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          SimpleStorageContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setEthContract({ web3, accounts, contract: instance }, {retrieveFile});\n      }\n\n      setContract();\n      \n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }, []);\n\n  const retrieveFile = async () => {\n    const { accounts, contract } = ethcontract;\n    // const ipfsHash = await contract.methods.get().call();\n    // setIpfsHash(ipfsHash);\n    console.log(\"Contract's get call: \", await contract.methods.get().call())\n  }\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      console.log('buffer is changed')\n      // console.log(filebuffer)\n      const b64 = new Buffer.from(filebuffer).toString(\"base64\")\n      // console.log(b64)\n      const mimeType = 'image/png';\n      let results = await ipfs.add(filebuffer);\n      console.log(\"ipfs result: \", results)\n      let ipfsHash = results.path;\n      console.log(\"ethcontract: \", ethcontract)\n      const contract = ethcontract.contract;\n      const accounts = ethcontract.accounts;\n      /*let amount = 1\n      let tokens = web3.utils.toWei(amount.toString(), 'ether')\n      let bntokens = web3.utils.toBN(tokens)*/\n      console.log(accounts[0]);\n      console.log(\"block.content: \", block.content);\n      console.log(\"block.sign: \", block.sign);\n      await contract.methods.set(block.content, block.sign).send({ from: accounts[0] });\n      // await contract.methods.set(\"test1\", \"test2\").send({ from: accounts[0] });\n      // setIpfsHash(ipfsHash);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const captureFile = (event) =>{\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    //reader.readAsArrayBuffer(file);\n    /* reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      setBuffer(reader.result);\n      console.log('buffer', filebuffer);\n    }*/\n    reader.onloadend = () => {\n      setBuffer(reader.result);\n    };\n    reader.readAsDataURL(file)\n  }\n\n  const onSubmit_decrypt = async (event) => {\n    event.preventDefault();\n    try {\n      console.log('onSubmit_decrypt executed!')\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const onChange = (event) => {\n    const { name, value } = event.target;\n    /*const name = event.target.name;\n    const value = event.target.value;*/\n    setState({\n      ...state,\n      [name]: value\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <p>Flask says {placeholder}</p>\n        <form onSubmit={onSubmit}>\n          <h2>Encryption</h2>\n          <input type='file' onChange={captureFile}/>\n          <input type='submit'/>\n        </form>\n        <img src={filebuffer} alt=\"receive image\"/>\n        <PostRequestEncryptHooks msg={filebuffer} block={block} setBlock={setBlock}/>\n        <button onClick={onSubmit}>\n          Contract send call\n        </button>\n        <button onClick={retrieveFile}>\n          Contract get call\n        </button>\n        <form onSubmit={onSubmit_decrypt}>\n          <h2>Decrytion</h2>\n          <p>Enter your key:</p>\n          <input type='text' onChange={onChange} name=\"send_file\" value={state.send_file}/>\n          <p>Enter your iv:</p>\n          <input type='text' onChange={onChange} name=\"sign_file\" value={state.sign_file}/>\n          <br></br>\n          <input type='submit' />\n        </form>\n        <PostRequestDecryptHooks state={state}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestEncryptHooks.jsx",["50"],"import React, { useState, useEffect } from 'react';\r\n\r\nfunction PostRequestEncryptHooks(props) {\r\n    const [Key, setKey] = useState(null);\r\n    const [IV, setIV] = useState(null);\r\n    const [Ciphertext, setCiphertext] = useState(null);\r\n    const [Ciphertext2, setCiphertext2] = useState(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            // body: JSON.stringify({ msg: props.filebuffer })\r\n            body: JSON.stringify({ msg: props.msg })\r\n        };\r\n        if (props.msg !== null) {\r\n            fetch('/encrypt2', requestOptions).then(res => res.json()).then(\r\n                data => {\r\n                    setKey(data.send_res);\r\n                    setIV(data.sign_res);\r\n                    setCiphertext(data.ciphertext);\r\n                    setCiphertext2(data.ciphertext2);\r\n                    console.log(Ciphertext2);\r\n                    console.log(\"send_res: \", Key)\r\n                    // setKey(\"Set key test\")\r\n                    console.log(\"send_res: \", Key)\r\n                    console.log('test');\r\n                }).then(\r\n                    props.setBlock({...props.block, [props.block.content]: Key}),\r\n                    props.setBlock({...props.block, [props.block.sign]: IV}),\r\n                    console.log(\"block.content: \", props.block.content),\r\n                    console.log(\"block.sign: \", props.block.sign),\r\n                    console.log(\"then:\", Key)); \r\n        } else {\r\n            console.log('buffer is null')\r\n        }\r\n    }, [props.msg]);\r\n    \r\n\r\n    return (\r\n        <div className=\"card text-cetner m-3\">\r\n            <h5 className=\"card-header\">Post Request Result - Encryption</h5>\r\n            <div className=\"card-body\">\r\n                <h6>Returned send_res: {Key}</h6>\r\n                <h6>Returned sign_res: {IV}</h6>\r\n                <h6>Returned Ciphertext: {Ciphertext}</h6>\r\n                <h6>Returned Ciphertext2: {Ciphertext2}</h6>\r\n            </div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport { PostRequestEncryptHooks };\r\n\r\n\r\n/*async function postData(url = '', data = {}) {\r\n    const response = await fetch(url, {\r\n        mothod: 'POST',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n        body: JSON.stringify(data)\r\n    });\r\n    return response.json();\r\n}\r\n\r\npostData('https://example.com/answer', { answer: 42 }).then(data => {\r\n    console.log(data);\r\n});*/\r\n","D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\PostRequestDecryptHooks.jsx",[],["51","52"],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\ipfs.js",[],"D:\\workspace\\nodejs\\react-flask-tutorial\\react-flask-app\\src\\utils\\getWeb3.js",[],{"ruleId":"53","severity":1,"message":"54","line":7,"column":8,"nodeType":"55","messageId":"56","endLine":7,"endColumn":31},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"53","severity":1,"message":"61","line":12,"column":23,"nodeType":"55","messageId":"56","endLine":12,"endColumn":37},{"ruleId":"53","severity":1,"message":"62","line":14,"column":10,"nodeType":"55","messageId":"56","endLine":14,"endColumn":19},{"ruleId":"53","severity":1,"message":"63","line":14,"column":21,"nodeType":"55","messageId":"56","endLine":14,"endColumn":33},{"ruleId":"53","severity":1,"message":"64","line":25,"column":10,"nodeType":"55","messageId":"56","endLine":25,"endColumn":18},{"ruleId":"53","severity":1,"message":"65","line":25,"column":20,"nodeType":"55","messageId":"56","endLine":25,"endColumn":31},{"ruleId":"53","severity":1,"message":"66","line":32,"column":9,"nodeType":"55","messageId":"56","endLine":32,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":55,"column":6,"nodeType":"69","endLine":55,"endColumn":8,"suggestions":"70"},{"ruleId":"53","severity":1,"message":"71","line":58,"column":13,"nodeType":"55","messageId":"56","endLine":58,"endColumn":21},{"ruleId":"53","severity":1,"message":"66","line":69,"column":13,"nodeType":"55","messageId":"56","endLine":69,"endColumn":16},{"ruleId":"53","severity":1,"message":"72","line":71,"column":13,"nodeType":"55","messageId":"56","endLine":71,"endColumn":21},{"ruleId":"53","severity":1,"message":"64","line":74,"column":11,"nodeType":"55","messageId":"56","endLine":74,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":149,"column":9,"nodeType":"75","endLine":149,"endColumn":52},{"ruleId":"67","severity":1,"message":"76","line":38,"column":8,"nodeType":"69","endLine":38,"endColumn":19,"suggestions":"77"},{"ruleId":"57","replacedBy":"78"},{"ruleId":"59","replacedBy":"79"},"no-unused-vars","'PostRequestEncryptHooks' is defined but never used.","Identifier","unusedVar","no-native-reassign",["80"],"no-negated-in-lhs",["81"],"'setPlaceholder' is assigned a value but never used.","'Plaintext' is assigned a value but never used.","'setPlaintext' is assigned a value but never used.","'ipfsHash' is assigned a value but never used.","'setIpfsHash' is assigned a value but never used.","'b64' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveFile'. Either include it or remove the dependency array.","ArrayExpression",["82"],"'accounts' is assigned a value but never used.","'mimeType' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'Ciphertext2', 'IV', 'Key', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["83"],["80"],["81"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [retrieveFile]",{"range":"88","text":"89"},"Update the dependencies array to be: [Ciphertext2, IV, Key, props, props.msg]",{"range":"90","text":"91"},[1672,1674],"[retrieveFile]",[1614,1625],"[Ciphertext2, IV, Key, props, props.msg]"]